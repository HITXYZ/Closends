老 曹 眼中 研发 管理 二三 事 
 
 原创   2017 - 01 - 18   老 曹   喔 家 ArchiSelf 
 这 是 在 gitchat 上 的 第一次 分享 ， 中生代 联手 gitchat 在 做 研发 管理 的 专题 活动 ， 作为 先锋 ， 抛砖引玉 。 
 
 关于 管理 ， 必然 会谈 到 业界 先贤 德鲁克 先生 对 管理 的 定义 。   
 
 管理 就是 界定 企业 的 使命 ， 并 激励 和 组织 人力资源 去 实现 这个 使命 。 界定 使命 是 企业家 的 任务 ， 而 激励 与 组织 人力资源 是 领导力 的 范畴 ， 二者 的 结合 就是 管理 。 
 这 是 对 企业 管理 的 阐述 ， 管理 是 一种 实践 ， 其本质 不 在于 ’ 知 ’ 而 在于 ’ 行 ’ ； 其 验证 不 在于 逻辑 ， 而 在于 成果 ； 其 唯一 权威 就是 成就 。 
 
 而 我们 多数 人 不是 企业家 ， 更 多 是 基层 的 管理者 ， 面对 的 一个 或 几个 小型 的 组织 。 尤其 是 研发 管理 ， 这里 主要 是 讨论 互联网 及 移动 互联网 领域 的 研发 管理 。   
 
 关于 研发 管理 
 什么 是 研发 管理 呢 ？   研发 管理 有着 广义 和 狭义 的 定义 ， 总的来说 ， 研发 管理 就是 在 研发 体系 基础 之上 ， 借助 信息 平台 进行 的 团队 建设 、 流程 设计 、 绩效 管理 、 风险管理 、 成本 管理 、 项目管理 和 知识 管理 等 活动 。   
 
 大道 易得 ， 小术 难求 。   论道 容易 务虚 ， 谈术 又 往往 让 人 有 支离破碎 的 感觉 。 这里 只 从 老 曹 的 亲身 感受 出发 ， 希望 可以 做到 抛砖引玉 。   
 
 老 曹 眼中 的 研发 管理 ， 首先 是 管理 ， 是 在 研发 领域 的 管理 。 管理 的 是 什么 ？ 管理 的 并 不是 研发 ， 通俗 的 说 ， 研发 管理 就是 管人 和 理事 。 也就是说 ， 是 面向 人 的 管理 ， 和 面向 事 的 管理 ，   并且 是 二者 的 有机 结合 。 大家 经常 接触 到 的 是 “ 管理 就是 管 人 “ ， 可见 人 是 研发 管理 中 的 核心 要素 。 但是 研发 的 目标 是 “ 成事 “ ， 在于 做事 的 结果 。 结果 导向 是 一种 共识 ， 老板 们 经常 说 的 就是 “ 我 只要 一个 好 的 结果 “ ， 但是 对于 基层 管理者 而言 ， 没有 过程 何来 结果 呢 ？ 与 组织 匹配 的 实践 流程 可能 更 容易 产生 良好 的 结果 。 
 
 面向 人 的 研发 管理 — — 管 人 
 人 不仅 是 团队 中 的 关键 资源 ， 更是 组织 中 的 核心 竞争力 。 面向 人 的 研发 管理 主要 指 人才培养 ， 管理 自己 的 老板 ， 以及 保持 团队 的 新陈代谢 。 
 
 人才培养 的 ABC 
 
 人 是 社会 中 的 人 ， 组织 是 学习型 的 组织 。 培养 团队 中 的 每个 人 都 要 具备 ABC 。   
 
 A ＝ Attitude ， 态度 
 
 唯一 一次 带 我们 闯进 世界杯 的 米 卢说 过 ， “ 态度 决定 一切 ” 。 proactive   是 态度 的 第一 要务 ， 不需 扬鞭 自奋蹄 。 积极 的 态度 ， 才能 更加 主动 ， 内驱力 是 最 重要 的 特质 。 拥有 遇事 积极主动 ， 勤于思考 和 积极思考 的 员工 ， 是 企业 的 财富 。 
 
 “ 阳光 心态 ” 是 一种 态度 ， 正 能量 可以 使 问题 简单 ， 使 做法 纯粹 ， 使 我们 的 产品 做到 极致 。 正 能量 不但 可以 帮助 融化 蓝冰 ， 而且 可以 使 我们 的 团队 充满 阳光 。 
 
 B ＝ Behaviour   ， 行为 
 
 把 优秀 当成 一种 习惯 ， 是 行为 方式 的 养成 。 《 7   habits   of   highly   effective   people 》 一书中 指出 “ First   thing ， First “ ， 把 “ 要事 优先 “ 放到 了 相当 高 的 位置 。 要事 优先 是 一种 结果 导向 ， 要事 优先 是 过程 正确 的 前提 。 通过 要事 优先 才能 使 自己 专注 起来 ， 通过 要事 优先 来 明确 规则 ， 进而 遵守规则 。 
 
 勇于 将 自己 的 后背 留给 自己 的 战友 ， 是 出于 信任 ， 更是 一种 勇敢 的 行为 。 在 应当 互相帮助 的 时候 ， 选择 当 将军 还是 选择 当 烈士 ， 完全 取决于 自己 。 有无 自我 调适 的 能力 ， 同样 重要 。 
 
 持之以恒 是 一种 行为 方式 。 都 知道 一万 小时 天才 理论 ， 而 真正 坚持 一万 小时 需要 勤耕 不辍 的 行动 。 
 
 C ＝ Capability ， 能力 
 
 学习 的 能力 是 最 重要 的 一种 能力 ， 建立 学习型 组织 ， 可以 不断 地 提升 个人 与 组织 的 素质 能力 。 
 
 胜任 力是 各种 能力 的 一个 综合 体现 。 把握 产品 的 能力 ， 协作 技巧 ， 行业 知识 ， 专业 能力 ， 形成 了 核心 胜任 力 。 能干 的 人 ， 不 在 情绪 上 计较 ， 只 在 做事 上 认真 ； 无能 的 人 ， 不 在 做事 上 认真 ， 只 在 情绪 上 计较 。 
 
 管理 自己 的 老板 
 
 我们 提倡 “ 敢于 质疑 ， 独立思考 的 自由 精神 “ ， 老板 的话 不 一定 都 是 对 的 。 但是 ， 敢于 质疑 并 不是 一味 地 顶撞 你 的 老板 ， 而是 以 如何 让 产品 或者 服务 给 客户 带来 更大 价值 的 角度 出发 的 。 
 
 作为 基层 研发 管理者 ， 如何 管理 你 的 老板 ？   
 
 首先 ， 出发点 一定 要 正确 ， 就事论事 ， 别有 负 能量 和 情绪 色彩 。 目标 和 初衷 一定 是 为了 把 这 一 产品 做好 。 不能 只 提 问题 ， 没有 解决方案 。 这样 的 方式 可能 要 好 一点 ： 
 
 “ 如果 问题 是 这样 的 XXX ， 那么 存在 如下 几种 解决方案 ：   A   xxxx ；   B   xxxx ； C   xxx 。   各种 方案 的 利弊 如下 ： A   yyy ； B   yyy ；   C   yyy 。 您 看 哪 一种 方案 最好 呢 ？ “   
 老板 不是 来 听 你 说 问题 的 ， 老板 更 希望 听到 你 对 问题 的 看法 ， 看到 你 解决问题 的 可能 路径 ， 从而 给出 决策 。 
 
 明确 问题 非常 重要 ，   你 和 老板 对 问题 看法 的 不同 ， 很多 是因为 双方 的 信息 不 对称 。 通常 地 ， 老板 所 了解 的 信息 更加 全面 ， 所以 ， 管理 你 的 老板 ， 就是 更多地 换位 思考 ， 站 在 老板 的 角度 思考问题 。 
 
 然而 ， 组织 的 存在 以及 组织 内外 的 分工 不同 ， 天然 导致 了 一定 程度 的 信息 不 对称 。 你 有时 无法 获得 和 老板 类似 的 信息 的 ， 这时 需要 做到 的 就是 期望值 管理 。 要 真正 了解 老板 的 期望 是 什么 ， 背后 真正 的 价值 是 什么 。 期望值 管理 的 要诀 就是 不要 给 老板 " 吃惊 的 瞬间 " ， 一定 不能 让 他 感觉 到 " 突如其来 " ，   老板 最 不能容忍 的 是 ， 自己 是 到 了 最后 一分钟 才 知道 " 事情 发生 了 重要 的 变化 " 的 人 。 
 
 所以 ， 管理 老板 在于 明确 问题 和 期望 ， 敢于 质疑 和 独立思考 ， 同时 在 行动 上要 执行 坚决 。 
 
 裁员 和 新陈代谢 
 
 在 研发 团队 中 ， 根据 木桶 原理 ， 真正 体现 团队 技术 能力 的 人 是 团队 中 力量 最弱 的 开发者 。 不怕 神 一样 的 对手 ， 就 怕 猪 一样 的 队友 ， 说 的 就是 如此 。 
 
 但是 ， 打造 精英 团队 往往 是 个 伪 命题 。 对 很多 团队 而言 ， 薪酬 ， 待遇 ， 福利 等 诸多 局限 ， 使得 我们 很难 与 那些 顶尖 或准 顶尖 的 公司 竞争 。 我们 往往 是 二三流 的 团队 来 完成 一流 的 事情 。 但是 ， 人才 是 可以 培养 的 ， 团队 也 是 可以 转变 的 。 
 
 如何 转变 ？ 除了 前面 谈到 的 ABC 之外 ， 就是 团队 的 新陈代谢 了 。 在 战场 上 ， 一个 战士 的 受伤 往往 意味着 损失 2 ～ 3 个 战斗力 。 在 开发 过程 中 ， 一个 人 挖 的 坑 ， 恐怕 两个 人 可以 填 干净 就 不错 了 。 劝退 有 可能 是 一种 对 双方 都 好 的 结果 。 末位 淘汰 尽管 有些 残忍 ， 但 往往 是 对 双方 的 负责 。 
 
 引进 高手 的 直接 手段 就是 招聘 了 。 当 你 向 HR 提 招聘 需求 的 时候 ， 不要 仅仅 给出 一个 JD ， 应该 有 更 清楚 的 目标 画像 ， 例如 毕业 于 怎样 的 院校 ， 最好 在 哪些 公司 工作 等等 。 这样 ， HR 的 伙伴 才 能够 有的放矢 ， 甚至 通过 猎头 完成 定向 招聘 。 
 
 总之 ， 研发 管理 要 具备 人才培养 和 人才 引进 的 能力 ， 一切 的 竞争 ， 归根到底 都 是 人 的 竞争 。 
 
 面向 事 的 研发 管理 — — 理事 
 拥有 了 良好 团队 ， 并不一定 达到 预期 的 目标 。 这 就是 研发 管理 的 另一方面 ， 面向 事情 的 研发 管理 。   事情 成功 的 显性 指标 是 结果 和 目标 的 达成 ， 隐性 指标 是 过程 是否 平滑 高效 。 通俗 地说 ， 面向 事 的 研发 管理 包括 两个 部分 ： 结果 导向 和 过程 敏捷 。 
 
 结果 导向 
 
 每个 管理者 都 知道 以 结果 为 导向 ， 即以 终为始 。 但 关键问题 是 什么 是 结果 ？ 当前 得到 的 的 结果 往往 不是 最终 的 结果 ， 而是 一个个 阶段性 的 结果 。 难点 在于 保证 目标 结果 的 连续性 。 
 
 产品 和 项目 
 
 互联网 中 往往 涉及 的 都 是 产品 ， 产品 和 项目 又 着 很大 的 差别 。 
 
 首先 ， 二者 的 生存 周期 不同 。 项目 的 生存 周期 包括 项目 的 启动 、 策划 、 执行 ， 验收 等 ， 并 在 结项 后 ， 项目 生存 周期 结束 。 产品 的 生存 周期 是从 产品 构思 ， 到 产品 的 版本 更新 ， 到 产品 中止 的 过程 。 产品 不 存在 完成 的 说法 ， 因为 产品 是 不断更新 的 ， 直到 被 新 产品 替代 ， 生存 周期 才 结束 。 
 
 另外 ， 二者 的 目标 不同 。 项目 的 目标 是 在 规定 的 时间 内 ， 利用 有限 的 资源 ， 高质量 的 完成 某个 特定 用户 的 需求 。 而 产品 的 目标 是 满足 一些 用户 的 通用 需求 。 
 
 很多 公司 的 情况 是 ： 首先 销售 拿下 一个 项目 ， 在 做 完 项目 后 ， 发现 还有 其他 客户 有 类似 的 需求 ， 于是 进行 产品化 。 这时 产品化 往往 很难 ， 因为 在 项目 驱使 下 ， 技术 架构 、 产品 功能 方面 往往 有 先天 缺陷 。 想要 产品化 ， 就 需要 重新 进行 产品 规划 和 技术 架构设计 ， 这样 成本 很 高 。 还有 就是 互联网 产品 的 形式 ， 是 先 有 产品 ， 再有 项目 ， 然后 在 项目 中 不断 获取 需求 ， 完善 产品 。 这种 情况 就 要求 首先 对 产品 未来 的 发展趋势 有 很 好 的 研究 和 预测 ， 也 是 产品 经理 在 互联网 企业 中 地位 很 高 并且 紧缺 的 原因 。 
 
 产品 和 项目 是 相辅相成 的 关系 ， 产品 的 开发 是 通过 一个个 项目 去 完成 的 。 将 产品 的 需求 ， 通过 项目 去 实现 ， 完成 产品 的 一个 版本 。 不断 迭代 进行 ， 进而 推动 产品 的 版本 更新 。 
 
 结果 的 连续性 
 
 为了 成就 一个 优秀 的 产品 ， 需要 保持 各个 阶段 的 连续性 。 
 
 面向 结果 的 连续性 ， 可以 借用 数据 中 连续 和 可导 的 概念 。 可导 的 函数 一定 是 连续 的 ， 高阶 导数 表明 了 函数 曲线 更加 光滑 。 函数 中 的 某点 可导 表明 了 这个 点 的 斜率 ， 即 这个 点 的 趋势 和 方向性 。 对于 研发 管理 而言 ， 鉴于 时间 的 连续性 ， 可以 天然 的 看成 连续函数 。 但是 一个 函数 处处 连续 ， 处处 不可 导是 怎样 的 一种 情形 呢 ？ 
 
 上图 是 一个 处处 连续 ， 处处 不可 导 的 函数 示例 。 该 函数 图像 没有 “ 曲 “ ， 在 任何 一点 上 都 没有 斜率 ， 你 无法 一 笔画 出 函数 的 曲线 。 在 研发 管理 中 ， 这是 一种 非常 可怕 的 状态 ， 在 任何 一个 时间 点 ， 都 不 知道 下 一个点 的 方向 在 哪里 ， 存在 着 盲目 的 试错 。 
 
 研发 管理 中 很 重要 的 一点 ， 就是 消除 不确定性 ， 可以 一 笔画 出 一条 光滑 的 曲线 。 具体 的 方式 可以 通过 关注 兼容性 和 可扩展性 的 方式 使 结果 连续 并 可导 。 
 
 方便 起 见 ， 这里 的 兼容性 主要 是 指 同一 产品 新旧 两个 版本 A 和 B 的 兼容 。 A 是 旧版本 ， B 是 新 版本 。 新 版本 B 对 A 的 兼容 一般 叫 前 向 兼容 ， 这是 大家 所 熟知 的 。 接口 的 兼容 并 不是 非常复杂 ， 但是 数据 层面 的 兼容 要 特别 关注 。 A 对 B 的 兼容 则 一般 叫 后 向 兼容 。 A   很难 知道 B 做 了 什么 事情 ， 但是 B 产品 的 上线 不要 导致 A 的 客户端 正常 工作 ， 这 就 需要 A 要 对 特殊 的 情况 做 合适 的 处理 。 
 
 可扩展性 是 系统 架构 的 一个 关键 约束条件 。 在 任何 时间 都 保持 对 产品 或 项目 的 恰如其分 是 非常 困难 的 ， 因为 社会 环境 在 变 ， 客户 的 行为 方式 和 产品 的 使用 方式 也 在 变 ， 唯一 不变 的 就是 变化 。 可扩展性 的 实践 和 度量 也 多种多样 ， 服务平台 的 微 服务化 架构 ， 客户 的 插件 式 开发 等等 都 是 对 可扩展性 的 有益 尝试 。 
 
 过程 敏捷 
 
 一旦 明确 了 目标 ， 一切 以 结果 为 导向 ，   接下来 团队 比拼 的 就是 效率 了 。 
 
 我们 知道 ， 世界 上 不 存在 这样 一种 方法 ： 只要 套用 ， 就 可以 写出 完美 的 软件 ， 无论 使用 的 哪种 设计模式 ； 但 确实 可能 存在 一种 开发方式 ， 可以 帮助 我们 一步步 构造 出 需要 的 软件 和 架构 — — 这有 可能 就是 敏捷 开发 。 
 
 敏捷 开发 主要 是 通过 高 透明性 、 可 检验 性 和 适应性 来 管理 复杂性 、 不 可预测性 和 变化 。 典型 的 敏捷 流程 如下 ：   
 
 一个 Sprint 周期 的 长度 要 依赖于 你 能 在 多长时间 内 保证 在 Sprint 期间 的 需求 不 发生 变更 。 
 
 敏捷 个人 
 
 敏捷 开发 乃至 一般 的 开发 过程 都 会 涉及 到 一件 事 ， 就是 任务 估点 ， 就是 如何 见招拆招 。 个人 觉得 ， 一个 task   最好 以 2 个 小时 为 单位 ， 半小时 设计 ， 半小时 编码 ， 半小时 测试 ， 半小时 文档 、 注释 以及 重构 。 
 
 原因 可能 是 这样 的 ， 互联网 上 流传 着 一句 名言 — — 3 个 月 就是 一年 ， 也 就是 1 周 相当于 1 个 月 。 那么 ， 2 个 小时 就 相当于 1 天 了 ， 也就是说 ， 我们 的 团队 要 将 每 两个 小时 当成 一天 来 计算 。 众所周知 ， 所有 的 估算 都 是 不 准确 的 ， 以 2 小时 为 单位 是 为了 降低 误差 。 就 像 我们 度量 的 时候 ， 以米 为 单位 度量 ， 误差 就是 米 ， 以 毫米 来量 ， 误差 就是 毫米 。 2 个 小时 一个 task ， 就 相当于 开发 中 的 “ 毫米 ” 。 
 
 敏捷 开发 中 最 重要 的 还是 代码 ， 优秀 的 代码 质量 决定 着 产品 或者 服务 的 质量 。 个人 以为 ， 有 四种 手段 可以 提升 一下 代码 质量 ： 
 
 1 ） 意图 导向 编程 ， 简单 地说 ， 就是 把 注释 变成 代码 ， 让 代码 拥有 自 解释性   2 ） 测试 驱动 开发 ， 尤其 是 对 后 端 而言 更为重要 ， 可以 结合 日志 系统 可以 更 快捷 定位问题   3 ） 创建 和 使用 分离 ， 这 就是 大家 常说 的 “ 高 内聚   低 耦合 ” 了   4 ） 单点 修改 原则 ， 单点 修改 可能 只是 一种 理想 状态 ， 但 应该 铭记在心 
 
 敏捷 团队 的 4 个 会议 
 
 敏捷 是 一种 方式 ， 不是 单纯 的 方法 ， 是 通过 各种 的 行为 方式 来 实现目标 。 在 实施 敏捷 开发 过程 中 ， 值得 关注 的 有 4 个 会议 。 
 
 1 ） Sprint   计划 会议 。 计划 会议 要 有 足够 的 时间 ， 最好 至少 8 个 小时 。 取出 部分 产品 需求 做成 sprint 需求 ， 并 写成 索引 卡 。 确定 并 细分 每 一个 索引 卡 的 故事 （ User   Story ） ,   然后 进行 工作 认领 （ 不是 分配 ） 。 同时 ， 确定 每日 站立 会议 的 时间 和 地点 ， 确定 好 演示 会议 和 回顾 会议 的 日期 。 
 
 2 ） 站会 是 敏捷 中 的 一个 显著特点 ， 每次 10 - 15 分钟 ， 迟到 将 接受 惩罚 ， 每个 成员 自问自答 三个 问题 ： 昨天 做 了 什么 ， 今天 要 做 什么 和 遇到 了 什么 问题 ， 会后 再 沟通 问题 的 解决方案 ， 最 重要 的 是 更新 燃尽 图 。 
 
 3 ） 演示 会议 是 至关重要 的 。 演示 是 跨 团队 的 ， 会 产生 不同 团队 之间 的 交流 。 不要 关注 太多 的 细节 ， 以 主要 的 功能 为主 ， 一定 要 让 老板 或者 客户 看到 。 演示 会议   非常 的 重要 ， 绝对 不 可以 被 忽略 。 
 
 4 ） 回顾 会议 的 时间 一般 在 1 - 3 个 小时 ， 要 找 最 舒适 的 地方 （ 最好 有 回顾 看 板 ） 。 开始 的 时候 轮流 发言 ， 而 不是 主动 发言 。 记录 问题 并 总结 ， 并 讨论 改进 的 方法 ， 放在 回顾 看板 上 。 每人 将 最 重要 的 2 - 3 个 改进 点 ， 成为 下 一轮 产品 需求 的 一部分 。 
 
 小结 
 老 曹 眼中 的 研发 管理 既 需要 道 的 指引 ， 又 需要 实战 的 方法 ， 以及 那些 看似 微不足道 的 雕虫小技 。 作为 一名 基层 管理者 ， 既 需要 培养 团队 的 ABC ， 又 需要 管理 你 的 老板 ， 保持 团队 的 新陈代谢 ， 因为 一切都是 人 的 竞争 。   总之 ， 研发 管理 是 面向 结果 ， 过程 敏捷 的 一种 实践 。 
 
 
 
 2017 年 1 月 10 日 周二 晚 8 点 30 分 ， “ 中生代 技术 ” 社区 老 曹 带来 了 主题 为 “ 老 曹 眼中 的 研发 管理 二三 事 ” 的 交流 。 以下 是 主持人 赫阳 整理 的 问题 精华 ， 记录 了 老 曹 和 读者 间 问答 的 精彩 片段 。 
 
 问 ： 请问 在 平衡 管理者 自身 开发 任务 和 团队 内外 其它 事务 的 时间 和 流程 上 的 一些 问题 ？ 
 
 答 ： 这是 基层 管理者 的 一个 困境 ， 既 要 协调 团队 ， 又 要 持刀 上阵 。 在 时间 安排 上 ， 一线 员工 一般 是 8 小时 4 个 task ，   基层 管理者 的 task   一般 是 2 ～ 3 个 ， 有 1 / 4 ～ 1 / 3   的 时间 用到 团队 内外 协调 沟通 上 。 就 敏捷 流程 而言 ， 做好 那 4 个会 （ 规划 ， 立会 ， 演示 ， 回顾 ） ， 对于 团队 外 的 非 紧急 问题 或者 非 规划 讨论 而言 ， 可以 回答 半小时 之后 再 讨论 处理 ， 这样 既 可以 让 问题 发起者 将 问题 梳理 明晰 ， 又 可以 让 自己 处理 好 手头 的 工作 ， 尤其 是 在 coding 的 阶段 。 
 
 问 ： 着重于 论道 ， 论术 不是 很多 ， 想 请问 在 研发 管理 中 的 kpi 作者 是 怎么 看 的 ？ 如何 做到 正向 的 激励 ， 又 不会 慢慢 使 团体 过于 功利化 呢 ？ 
 
 答 ：   研发 是 一件 创造性 活动 ， 我 讨厌 KPI ， 提倡 团队 的 结果 导向 和 过程 敏捷 。 
 
 激励 分为 物质 激励 和 非 物质 激励 两种 ，   基层 管理者 很难 实现 物质 激励 （ 例如 发 奖金 ） ， 需要 相关 激励机制 的 配合 。 对于 非 物质 激励 ， 关键 是 价值观 认同 ， 说白了 就是 洗脑 。 另外 ， 技术 提升 也 是 激励 的 一种 形态 ， 让 团队 真的 有 成就感 。 
 
 问 ： 工作 中 会 碰到 两种 成员 ： 一种 聪明 不是 很 服管 ， 态度 一般 ， 但 完成 效率 很 高 ， 能 单独 完成 复杂事物 ， 另 一种 是 不 聪明 但 服管 ， 态度 很 认真 ， 但 效率 不是 很 高 ， 经常 需要 指导 。 请问 这 两种 成员 应该 怎么 培养 ？ 怎么 管理 ？ 
 
 答 ： 对于 聪明 的 员工 ， 给予 认可 ， 并 提供 更 多 具有 挑战性 的 工作 ， 包括 技术 的 预研 和 分享 。 
 
 对于 所谓 服管 的 员工 ， 关键在于 质量 和 效率 的 匹配 程度 ， 衡量 一下 他 ／ 她 对 团队 的 价值 贡献 ， 如果 ABC 中 的 C 即 成长 空间 有限 的话 ， 将 被 列入 新陈代谢 的 名单 ， 小白兔 对 团队 而言 是 危险 的 。 
 
 问 ： 产品 作为 项目经理 如何 lead 技术 ？ 
 
 答 ： 产品 经理   一般 作为 product   owner ，   而 所谓 的 项目经理 更 像 scrum   master ， product   owner   如果 兼作   scrum   master ， 这是 一个 好 事情 。 产品 经理 不要 期待 lead   技术 ， 而是 要 结果 导向 ， 能否 按时 完成 产品 功能 和 目标 ， 演示 成果 才 是 所 需要 关注 的 。   产品 经理 和 技术人员 之间 不要 “ 撕 ” ，   不是 纠缠 在 是否 听 谁 的 上面 ， 而是 本着 相互 帮助 共同完成 目标 的 态度 ， 确定 目标 ， 积极 协作 。 
 
 问 ： 作为 一个 技术 管理者 ， 自身 的 职业 发展 路径 如何 规划 ？ 如何 不断 培养 自己 的 技术 领导力 ？ 
 
 答 ： 一个 技术 管理者 的 职业 发展 是 因人 而已 的 ， 一句 话 ， follow   your   heart ，   你 的 初心 是 什么 ？ 什么 能够 给 你 带来 更 多 的 乐趣 。   我见 过 转型 为 产品 总监 ， 产品 VP 的 技术 管理者 ，   也 见 过 走上 CTO 岗位 的 ， 还 可以 持续 的 热爱 代码 ， 既 是 某 方面 的 专家 ， 又 是 一个 全栈 工程师 甚至 全栈 架构师 。 关于 全栈 架构师 的 描述 ， 可 参看 我 的 两篇 旧文 ： 
 
 《 全栈 的 技术 栈 设想 》 
 《 再谈 《 全栈 架构师 》 一文 》 
 问 ： 都 有 哪些 管理 雕虫小技 可以 直接 使用 ？ 
 
 答 ： 雕虫小技 相当于 编程 时 的 tips ， 都 有 有 典型 的 使用 场景 和 适用范围 ， 例如   面对 站会 迟到   的 童鞋 ， 有 多种 办法 ： 
 
 冷处理 ， 大家 静止 沉默 等 他 到来 ， 让 他 意识 到 在 浪费 大家 的 时间 。 
 热处理 ， 他 到 了 ， 鼓掌 ， 罚 10 * 2 ^ ( n - 1 ) 元 红包 ， 即 10 ， 20 ， 40   等等 ， 将 红包 用于 团队 建设 。 
 问 ： 针对 产品 规划 团队 和 研发 团队 是 两个 部门 的 情况 ， 如何 落实 产品 经理 对 产品 的 生命周期 跟踪 ？ 
 
 答 ： 组织 结构 决定 系统 架构 ， 这是 康威 定律 的 简明 说法 。 关于 组织 结构 与 研发 的 关系 ， 大家 可以 听 一下 中生代 的 另 一位 朋友 — — 右军 给 大家 带来 的 一场 Chat ： 《 从康威 定律 和 技术 债看 研发 之痛 》 。 
 
 如果 产品 和 研发 是 分开 的 ， 是 一个 比较 难受 的 事 ， 但 通过 敏捷 的 方式 还是 可以 改善 的 。 敏捷 的 本质 是 通过 信息 的 透明性 ， 产品 的 可验证 性 和 适应性 来 来 管理 复杂性 、 不 可预测性 和 变化 。   团队 间 需要 信息 共享 协同工作 的 工具 ， 例如 trello ， worktile ， slack 等 。   产品 经理 对 产品 生命周期 的 跟踪 通过 信息 共享 实现 。 
 
 问 ： 测试 团队 和 研发 团队 一般 的 配比 是 多少 ， 如何 对 测试 团队 进行 绩效 跟踪 ？ 
 
 答 ： 测试 与 研发 的 配比 一般 不要 低于 1 : 7 ， 建议 QA 入 团队 ， QA 的 绩效 是 在 团队 绩效 的 约束 下 的 。 绩效 跟踪 同样 可以 通过 协同 工具 实现 ， 对于 绩效考核 ， 可以 在 QA 和 研发 之间 做 绩效 互评 ， 然后 取 正态分布 的 期望 ， 或者 简单 的 加权 平均 。 
 
 问 ： 测试用例 的 管理 有 什么 好 的 建议 么 ？ 
 
 答 ： 文档 的 管理 ， 包括 测试用例 的 管理 ， 推荐 使用   confluence ， 它 可以 记录 文档 的 变更 状态 。 
 
 问 ： 公司 有 多个 产品 同时 开发 ， 人员 和 开发 项目 几乎 1 : 1 ， 有 什么 好 办法 合理安排 人员 ？ 怎么 有效 跟踪 推进 进度 ？ （ 背景 ： 12 个 开发 ， 大大小小 的 产品 有 10 个 。 ） 
 
 答 ： 创业 团队 还是 成熟 公司 ？ 人员 和 开发 项目 几乎 1 : 1   几乎 没 怎么 见过 ， 开发 项目 都 是 微型 么 ？ 
 
 正像 我 文中 解释 的 ，   first   thing ， first 。   最 重要 的 事情 只有 一件 （ 推荐 阅读 ） ，   应该 集中 优势 兵力 打 一点 的 。 跟踪 进度 ， 推荐 使用 问题 7 中所 谈到 的 协同 工具 。 如果 是 外包 的话 ， 那 是 另 一种 做法 了 。 
 
 问 ： 讲讲 敏捷 状态 下 的 周期性 绩效考核 有 哪些 关键点 吧 。 
 
 答 ： 个人 认为 ， 敏捷 状态 下 的 周期性 绩效考核 可能 存在 如下 几点 ： 
 
 周期 ： 一般 以 3 个 sprint 为宜   ， 但 需要 关注 每个 sprint 的 回顾 会 。 
 任务量 ：   关注 燃尽 图 ， 借助 工具 了解 伙伴 的 工作 状态 。 
 绩效考核 体系 ：   主要 是 promotion   的 机制 和   carreer   development   的 结合 。 
 评价 方式 ：   多角度 ， 但 未必 是 360 度 评价 ，   面谈 必不可少 ， 明确 进步 与 不足 。 
 问 ： 请教 下 敏捷 的 质量 管理 关键点 ？ 求 案例 分享 。 
 
 答 ：   0   bug   is   a   dream 。   代码 质量 是 第一位 ， 可以 尝试 文中 谈到 的 四种 方式 和 原则 。 
 
 敏捷 质量 管理 的 要点 ， 个人 认为 ， 是 如何 快速 发现 和 修复 问题 ， 更 多 是 对 架构 和 技术 能力 的 考量 ， 例如 ： 
 
 灰度 升级 的 方式 和 体系 架构 。 
 APP 端的 热补 技术 ， 例如 Tinker   和   JSpatch   的 应用 。 
 问 ： 产品 、 研发 过度 设计 怎么 解 ？ 就是 平时 会 遇到 很多 从 开发 角度 讲 很 容易 实现 的 方案 和 可以 解决 更 多 问题 的 方案 。 从 产品 功能 上 却 要 满足 各种 情况 ， 这里 就是 涉及 到 怎么 界定 过度 设计 问题 。 设计 了 很多 用 不到 的 功能 ， 设计 了 要 返工 的 功能 。 但 如果 不 考虑 的 更 全 一些 ， 扩展性 又 比较 差 。 这个 问题 应该 怎么 处理 比较 好 一点 ? 
 
 答 ： 过犹不及 。 在 敏捷 过程 中 ， 我 遇到 的 更 多 是 设计 不足 ， 只有 在 大 企业 和 大 团队 才 有 可能 出现 过度 设计 的 问题 。 对于 过度 设计 ， 更 多 原因 可能 是 在 杜撰 需求 ， 需求 的 界定 可以 使用 User   Story   和   UML   中 的 Use   Case   相结合 。   扩展性 最好 也 从 结果 的 连续性 上 考虑 。 
 
 问 ： 您 眼中 的 技术 总监 是 应该 具备 什么样 的 技术 能力 ? 该 如何 面试 一位 技术 总监 呢 ? 
 
 答 ： 技术 总监 也 是 有 类别 的 ， 客户端 总监 ， 服务端 总监 ， 中间件 总监 ， 解决方案 总监 等等 ， 这 是 与 不同 公司 的 产品 形态 和 商业模式 有关 的 。   对 技术 总监 的 具体 技术 能力 要求 也 是 因 岗位 而定 ， 阿朱 曾经 写过 一篇 《 CTO 、 技术 总监 、 首席 架构师 的 区别 》 的 短文 ， 可以 参考 一下 。 
 
 面试 中 可能 除了 技术 能力 外 ， 还 需要 面试 例如 沟通 ， 抗压 ， 应变 等 能力 即软 技能 。 
 
 问 ： 我 提 一个 土 一点 的 问题 哈 ， 有人 说 公司 不靠 谱 ， 我 走 了 ； 有人 说 老板 合不来 ， 我要 去 找 新天地 . 请问 曹总 ， 有没有 办法 帮助 年轻人 如何 做 向上 管理 ， 包括 在 合适 的 时间 炒掉 老板 ！ 
 
 答 ： 个人 觉得 ，   对于 初入 职场 的 年轻人 而言 ， 前 两份 工作 ， 尤其 是 第一份 工作 ， 最好 在 3 年 以上 ，   至少 也 要 9 个 月 以上 ， 要 逐渐 学会 看 别人 的 优点 ， 没有 垃圾 的 老板 ， 只有 狭隘 的 视角 。 
 
 对于 年轻人 ， 管理者 可以 尝试 帮助 他 思考 职业规划 ， 提升 的 方向 和 路径 ， 没有 人 能够 随随便便 成功 的 。 
 
 问 ： 如果 老板 并 不 特别 支持 敏捷 （ 假设 不 懂 ）   那么 还 可以 推 吗 ？   应该 高调 敏捷 还是 低调 敏捷 ？ 
 
 答 ： 敏捷 开发 主要 是 通过 高 透明性 、 可 检验 性 和 适应性 来 管理 复杂性 、 不 可预测性 和 变化 。   首先 是 结果 导向 ， 一定 要 让 老板 知道 结果 ， 尤其 是 在 演示 会议 中 。   在 老板 不知情 或者 自己 权力 有限 时 ， 敏捷 要 从 低调 做起 ,   但是 要 让 管理 团队 体会 到 变化 。 
 
 问 ： 敏捷 导入 有 啥 建议 ？ 技术 上 发展 太快 ， 如何 让 技术 员工 信服 ？ 典型 问题 就是 敏捷 太 理想 ， 敏捷 团队 素质 要求 高 ， 我们 做不了 。 怎么办 ？ 
 
 答 ： 敏捷 需要 组织 结构 上 的 支持 的 。 组织 机构 决定 了 系统 架构 ， 也 决定 了 研发 流程 。   敏捷 导入 前 ， 要 有 相应 的 技术 准备 和 预热 ， 比如 请 敏捷 教练 外训 ， 相关 工具 的 熟悉 等等 。 
 
 就 技术 而言 ， 没有 最好 的 技术 ， 只有 相对 适合 的 技术 。   结果 导向 ， 让 团队 有 成就感 。 
 
 敏捷 是 个 面向 结果 的 过程 ， 都 是 可以 做到 的 。 个人 敏捷 ， 团队 敏捷 ， 项目 敏捷 等等 ， 现在 还 出现 了 数据 敏捷 ， 关键 是 观念 的 转变 ， 辅助 以 技术 的 支撑 。 
 
 问 ： 创业 性 公司 ， 或 类似 小作坊 这种 ， 如何 进行 研发 管理 ？ 另外 开发 大部分 都 是 1 - 2 年小白 怎么 搞 研发 管理 ？ 
 
 答 ： 很 幸运 ， 本人 有过 亲身经历 。 
 
 首先 ， 架构 是 第一位 的 ， 尤其 是 面向 云 服务 的 架构 ， 利用 公有 云 服务 ， 以及 各种 XaaS ， 使 小 团队 做大 事情 成为 可能 。 另外 编程语言 的 选择 也 是 一个 因素 ， 决定 了 技术 栈 的 构成 。 小作坊 更 适用 于 结果 导向 ， 过程 敏捷 的 。 
 
 带 初级 工程 是 要 有 耐心 的 ， 条件 允许 的 情况 下 ， 花 时间 结对 编程 是 值得 的 。 
 
 问 ： 年 后 又 是 一年 一次 的 跳槽 季 ， 如何 留住 核心 员工 ， 如何 劝 走 文中说 的 问题 员工 ， 有何 建议 ？ 
 
 答 ： 对于 核心 员工 ， 要 防患未然 。   核心 员工 应该 在 人才 矩阵 中 的 ，   每月 最好 都 给予 关注 ， 及时 把握 动向 ， 往往 他 提出 离职 的 时候 ， 就 已经 晚 了 。 
 
 对 问题 员工 ， 要 霹雳 手段 ， 菩萨心肠 ， 长痛 不如 短痛 ， 直接 办 离职 。 
 
 问 ： 请问 ， 有些 开发 工程师 对 自己 的 开发 工作 已经 养成 了 习惯 ， 如果 公司 因为 业务 或 其他 原因 需要 改变 架构 运用 新 技术 ， 如何 让 现有 开发 同学 快速 接受 和 改变 ？ 
 
 答 ： 管理 是 管人 ， 理事 。 管人 中 很 重要 的 一项 就是   才 管理 ABC ，   C 中 重要 的 一点 就是 学习 能力 ， 保证 组织 是 学习型 的 。   哪些 工作 习惯 是 好 的 工作 习惯 么 ？ 是 提高 生产率 的 习惯 么 ？ 
 
 另外 ， 技术 的 预研 很 重要 ， 尤其 是 和 团队 中 当前 技术 的 对比 ， 分享 要 透明 ， 是 共同 决策 的 结果 。 
 
 问 ： 何来 计划 一些 工作 ， 因为 总是 有 意想不到 的 东西 出现 来 打乱 计划 ， 怎么 来 规划 一些 新 的 技术 应用 ？ 
 
 答 ： sprint   的 周期   是 以 需求 不 改变 为 依据 的 。 什么 是 意想不到 的 东西 ？ 老板 发现 的 bug ， 还是 ？ 
 
 对于 新 技术 可以 关注 ， gitchat ， 中生代 等等 都 是 学习 新 技术 讨论 技术 痛点 的 好 场所 。 
 
 问 ： 你 管理 团队 包含 了 比 你 资历 深 的 ， 技术 好 但是 不 听 管理 的 ， 整个 团队 都 倾向 于 一个 方向 但 他 非要 另外 一个 方向 的 ， 这个 怎么 搞 ？ 在 多个 技术 方案 都 可行 的 情况 下 这 人 不 考虑 具体 方案 落地 过程 的 人员 配置 需求 ， 只 在 技术 层面 讨论 哪个 更优 ， 该 怎么 处理 ? 
 
 答 ： 这时 ， 一定 要 明确 团队 的 目标 和 资源 ， 包括 时间 的 限制 ， 全面 比较 两个 或 多个 方案 ， 关键 是 找到 最优 路径 ， 而 不是 单纯 的 技术 最优 ， 可以 采用 集体 智慧 的 。   如果 无法 说服 ， 不要 影响 团队 ， 可以 调离 他 。 
 
 问 ： 我 觉得 目前 的 研发 管理工作 ， 觉得 业务 和 研发 之间 的 沟通 问题 ， 怎么 能 对 需求 的 理解 达到 最高 ？ 
 
 答 ： 业务 和 研发 最好 在 一个 team ， 这样 目标 一致 ， 规划 会要 充分 一点 ， 可以 尝试 用 UML 中 的 相关 界定 需求 的 边界 。 其实 ， 定义 需求 是 研发 的 起点 ， 也 是 第一个 关键点 。 
 
 问 ： 如何 把 政治 因素 的 影响 降到 最低 ？ 
 
 答 ： 有人 的 地方 就 有 政治 ， 最好 把 政治 斗争 归结为 为 经济 服务 ，   用 利益 来 绑定 双方 ， 可以 降低 政治 因素 的 影响 。 
 
 问 ： 我们 几个 项目 的 回顾 产品 问题 总结 如下 ， 能否 指教 解决 的 思路 ？ 
 
 
 
 答 ： 粗略 看 了 一下 ， 一半 以上 都 是 和 需求 相关 的 。   需求 的 界定 需要 花 时间 的 ， 所 花费 的 时间 是 整个   sprint   中   最 耗时 的 ， 推荐 不少 于 1 天 的 。 如果 要 启动 研发 ， 至少 要 明确 MVP   最小 可 运行 的 产品 。 如果 产品 经理 有 缺憾 需要 技术 侧 提前 介入 。 
 
 例如   “ 希望 能 更 深入 的 了解 ， 这个 需求 的 目的 是 什么 ， 不是 纯 … … ” 这 说明 了 产品 经理 并 没有 把 需求 讲清楚 ，   为什么 做 ？ 很 容易 调动 不了 研发 人员 的 主观 能动性 。 另外 ， 对 需求 的 描述 有 数据 支撑 么 ？ 如果 方向 错 了 ， 停止 就是 进步 。 
 
 问 ：   作为 管理 新兵 ， 对 自己 的 预期 应该 是 如何 ？ 应该 怎么 设定 自己 成长 的 目标 ？ 怎么 奖励 或者 惩罚 自己 ？ 怎么样 做到 不断 与时俱进 ， 技术 和 管理 都 不 落伍 ？ 
 
 答 ： 自己 的 预期 要 和 团队 的 目标 ， 甚至 部门 乃至 公司 的 目标 相匹配 。 成长 的 目标 确定 也 要 做到 与 组织 目标 的 吻合 ，   另外 就是   follow   you   heart 。 管理 是 一种 实践 ， 以 结果 为 验证 ， 是 需要 尝试 和 实践 的 ， 实践 本身 就是 与时俱进 的 。 
 
 技术 上 的 与时俱进 好像 只有 勤奋 二字 了 ， 像 《 卖油 翁 》 中 所说 ， “ 无 他 ， 惟 手熟 尔 ” 。 
 
 问 ： 公司 虽然 定期 会 有 很多 培训 ， 设计模式 的 、 各种 框架 的 。 但是 刚 工作 两三年 的 员工 往往 只是 根据 业务 需求 堆砌 代码 ， 不 注重 代码 整洁 、 封装 复用 扩展 以及 设计模式 ， 每次 代码 review   时 发现 很多 问题 ， 很 明显 是 不够 主动 ， 缺乏 工匠 精神 。 那么 如何 有效 的 培养 中级 初级 工程师 的 工匠 精神 ？ 
 
 答 ： 就 代码 整洁 而言 ，   建议 在 git 侧 安装 sonar   之类 的 插件 ， 以 代码 规范 在 提交 时 做 检查 ， 不 符合要求 的 ， 直接 提交 失败 。 至于 封装 复用 等 ， 可以 参考 文中 个人 敏捷 的 4 种 方式 。 需求 是 有 约束 的 ， 产品 经理 给出 的 feature   理由 要 充分 ，   技术 在 设计 的 时候 考虑 要 全面 。 如果 以 工匠 精神 作为 一种 价值观 ， 并且 在 一定 时间 内 无法 得到 某些 员工 的 认同 ， 可以 考虑 团队 的 新陈代谢 。 
 
 问 ： 不会 码 代码 ， 如何 管理 研发 ？ 
 
 答 ： 可以 不 贡献 代码 ， 但 最好 懂 技术 。 阿里 的 王坚 博士 好像 也 不码 代码 吧 ， 同样 可以 做 杰出 的 CTO 。 
 
 问 ： 静态 代码 插件 无法 覆盖 到 一些 问题 ， 比如 可以 写 设计模式 解决 ， 但 写 了 if   else   ， 公司 都 有 关于 良构 代码 的 培训 ， 只是 一些 初级 员工 没有 匠心 精神 ， 有 什么 好 的 办法 培养 吗 ？ 
 
 答 ： 树立 标杆 ， 优秀 选能 。 在 绩效 ， 奖项 和 宣传 方面 都 要 提倡 。 设计模式 ， 代码 规范 ， checkstyle 是 一些 范式 。 一个 池塘 的 荷花 ， 总有 早开 的 ， 让 早开 的 影响 晚开 的 ， 最后 一溏 荷花 。 少数 始终 不开 的 ， 问题 就 出 在 他们 自身 了 。 解铃还需系铃人 ， 对于 浪费时间 的 人 ， 考虑 淘汰 出 团队 。 
 
 
 
 
 
 微信 扫 一扫 
 关注 该 公众 号